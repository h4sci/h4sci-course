---
title: |
  Hacking for Social Sciences
subtitle: "Class Is Open. C'mon in."
author: "@whatsgoodio"
institute: "KOF, ETH Zurich"
date: "2020-10-01"
output:
  xaringan::moon_reader:
    css: ["robot-fonts","more.css"]
    lib_dir: libs
    nature:
      highlightStyle: github
      highlightLines: true
      countIncrementalSlides: false
      ratio: '16:9'
      beforeInit: "https://platform.twitter.com/widgets.js"
---

class: center,middle

## markdown, github, swissdata

---

class: center,middle

## Background Survey


---


## Overall Course Outline

01.10.	10-13	The Big Picture
02.10.	10-14	Git & Workflows

22.10.	10-13	R Programming Crash Course
23.10.	10-14	Programming with Data

19.11.	10-13	Infrastructure
20.11.	10-14	Infrastructure

03.12.	10-13	Semester Projects
04.12.	10-14	Semester Projects

---

## Course Resources

- Course Repository: [https://github.com/h4sci/h4sci-course](https://github.com/h4sci/h4sci-course)
- Hacking for Social Sciences and the Humanities Free Online Book: [https://github.com/h4sci/h4sci-book](https://github.com/h4sci/h4sci-book)
- Tasks & Exercises: [https://github.com/h4sci/h4sci-tasks](https://github.com/h4sci/h4sci-tasks)
- [R Studio Server](https://teaching.kof.ethz.ch/auth-sign-in) (only available during semester to ETH students enrolled to the course) 
- Slack Workspace (invite only, only available to enrolled ETH students): https://h4sci.slack.com/
- Zoom Live Sessions (only available through ETH acocunts)


---

class: center,middle

## Course Objectives


---

class: center,middle

## 1. Understand the Role of Components in the Tech Stack

---

class: center,middle

## 2. Carpentry Level Version Control + Dev Workflows

---

class: center,middle

## 3. Applied Data Handling /w Programming Language

---

class: center,middle

## Benchmark: Create a Production Pipeline

---

class: center,middle

## Survey Results

---

## Survey Results

some ggplot shizzle I


---


## Survey Results

some ggplot shizzle II


---


## Survey Results

some ggplot shizzle III


---

class: center,middle

## Why Would A Researcher Want to Program ?

---

class: center,middle

## Automation

<!--
- APIs
- functions
-->


---

class: center,middle

## Data Visualization

<!--
- shiny
- d3
- coolest visualizations
- argument againts tableau (decent viz, but niche, programming can be used more flexible)
-->


---

class: center,middle

## Code as a Communication Channel

<!--
- reproducible research
- github
- reproducible example (damn to book needs a glossary)
- OSS community, e.g., (Stack Overflow)
-->

---

class: center,middle

## What About You ? 

---

## Debriefing

- Survey report
- personal introduction
- forming teams 

---

## An Overview of the Open Source Toolbox


---

class: center, middle

## Introduction to Version Control with git

--- 

class: center, middle

## Why learn git? 

<!-- 
- used waaaaayyyy beyond academia (MS paid 7 billion for GitHub)
- de facto standard for collaboration, proven workflows
=> fits you right in. makes you a team player. Willing to dig into some overhead
for the sake of smooth sailing for everybody -> strong signal on the job market. 
Personally I don't care to much about languages, you'd eventually learn them,
but if you don't know git by now, it says something about your willingness. 

-->

--- 

## Git's + / - 


--- 


## Git Basic Functionality

<!-- 

slides from h4n schema

-->

---

## Use the Console, Luke! 

basics
- git init
- git status
- git log
- git add <filename>
- git commit -m 'what changes were about'
- git push origin <branch name>
- git pull

going back


branches
- git branch
- git checkout <filename>
- git checkout <branch name>
- git merge <some-branch> 

--- 

## Follow Along

- show stuff using R Studio server's terminal (sent students pws through e-doz)
- create a folder called playground
- cd into it
- run git init to create a repo
- git add
- git commit -m 'message!'
- git log
- git status
 
---


## Git Teamwork: Remote Repository... 

- connect using an RSA Key
- students need to register at GitHub for the course
- create repository called 'sandbox'
- create a file named <your_lastname> and say Hi to the world. (demonstrate ff)

## Resolving Merge Conflicts

- edit the file called README.md, add, commit push your change
- merge conflict that needs a resolution. Order names, firstnames, age in the 
same file. resolve conflicts. quit vim.

---


## Issue Tracker's and Swimlanes. 




--- 

## Git: Feature Branch Based Workflow





## Git Specific Resources 

- [Git Book (Official)](https://git-scm.com/book/en/v2)
- [Git Handbook by GitHub](https://guides.github.com/introduction/git-handbook/)
- [A git cheat sheet by GitHub](https://github.github.com/training-kit/downloads/github-git-cheat-sheet/)
- [Learn git by Atlassian](https://www.atlassian.com/git)
- [Git Videos by Git Tower (Watch CLI version)](https://www.git-tower.com/learn/git/videos)

- [Atlassian Bitbucket (Remote Git Provider)](https://bitbucket.org/product/)
- [Gitlab (Remote Git Provider)](https://gitlab.com)
- [ETHZ Gitlab (Remote Git Provider)](https://gitlab.ethz.ch)
- [Github (Remote Git Provider)](https://github.com)



https://git-scm.com/book/en/v2/Getting-Started-Installing-Git


## R Programming Crash Course

- intro note: the choice that doesn't matter (mlr, reticulate etc)

- vector, matrix, data.frame, list
- lapply
- base R, tidyverse, data.table

- resources 

## Programming with Data

## Data Formats

- cross section
- time series
- panel
- nested, e.g., spatial data 
- unstructured or NLP data

## turning text into data

## File Formats

to represent data format

## Beyond File Based Storage: Database SQL vs NoSQL

## Data Management When to Do What

Case study: file based vs. PostgreSQL

- file based storage
- PostgreSQL

Why have decades of software engineering not found an inevitable format? 
Cause there are different needs. Luckily, we can transform data. This is what
programming /w data is mostly about. 


## Licenses & Open Data


## Consuming data

- KOF Datenservice API + kofdata API wrapper for R 
- well documented projects gtrendecon
- OK'ish .csvs
- FSO spreadsheets






class: prod

## What is Production?



.pull-left[

</br>
</br>


> Repeated (regular) runs of the same task resulting in a pre-defined,
quality controlled result. 
>
> `r tufte::quote_footer('--- KOF definition of production')`
]


```{r setup, include=FALSE}
options(htmltools.dir.version = FALSE)
```

---

## Docker in One Slide

- Single purpose, application focused virtualization

- Images are blueprints for containers

- Images live in registries such as dockerhub.com

- Docker files are text based configs from which images are created

- Images can be stacked, so we can build on existing images. 

---

class: dockers

## Main Components: Docker Containers  

.pull-left[

permanent containers: 

- PostgreSQL
- Apache Airflow
- miniCRAN
- custom docker registry
- APIs (plumber, servr, express.io)

non-permanent containers

- a universal base image
- task specific images

]


---

## Main Components: Gitlab CI

.pull-left[


on push to default branch

- build (R) packages 
- push to miniCRAN
- deploy to servers
- push files to docker host / volumes (rsync)
- (rebuild docker images)

]



---

## Main Components: Gitlab CI

.pull-left[


on push to default branch

- build (R) packages 
- push to miniCRAN
- deploy to servers
- push files to docker host / volumes (rsync)
- (rebuild docker images)

]

.pull-right[

.gitlab-ci.yaml

```

[...]

stages:
  - buildncheck
  - kran
  - deploy

check:
  image: rocker/tidyverse:3.6.0
  stage: buildncheck
  artifacts:
    untracked: true
  script:
    # we don't need it and it causes a hidden file NOTE
    - rm .gitlab-ci.yml 
    - R -e 'devtools::install(".", repos = "miniCRAN")'
    - R -e 'devtools::check(error_on = "error")' 
    - R CMD build . --no-build-vignettes --no-manual

[...]

- ssh -t gitlabci@someserver.com 'sudo /usr/bin/R -e \\
  "install.packages(\"thatpack\", repos = \"miniCRAN\")"'


```


]


---


class: airflow

## Main Components: Apache Airflow


.pull-left[


- SO questions tagged airflow: 4K+
- workflow scheduler
- monitor / overview dashboard
- can trigger processes locally, on VMs, docker, Kubernetes etc.



]

.pull-right[


```{r echo=FALSE, out.width=450}
knitr::include_graphics("airflow_screenshot.png")
```




]

---

## An Example Workflow: Sourcing Data (ETL) 

</br>
</br>

.center[
> Gather data from various public sources, </br>
> transform into homogeneous time series format, </br>
> read into PostgreSQL database.</br>
> `r tufte::quote_footer('--- the swissdata project in a nutshell.')`

]


---

## Directed Acyclic Graphs (DAG)

.pull-left[

```{r echo=FALSE, out.width=450}
knitr::include_graphics("swissdata_af.png")
```

]

.pull-right[

```python

[...]

dag = DAG('swissdata', description='Run swissdata',
          schedule_interval = '0 9,17 * * *',
          default_args = default_args, catchup=False)

with dag:
    run_swissdata = DockerOperator(
        task_id = 'run_swissdata',
        image = 'some-docker-registry.ch/swissdata:0.1.0',
        api_version = 'auto',
        auto_remove = True,
        force_pull = True,
        volumes = [
            'swissdata-output:/output'
        ],
        docker_url = "unix:///var/run/docker.sock"
    )

    source_swissdata = DockerOperator(
        task_id = 'source_swissdata',
        image = 'some-docker-registry.ch/kofbase:0.1.0',
        user='some-base-user',
        api_version = 'auto',
        auto_remove = True,
        force_pull = True,
        volumes = [
            'swissdata-output:/swissdata',
            'kofbase-tasks:/tasks'
        ],
        docker_url = 'unix:///var/run/docker.sock',
        environment = {
            'PG_PASSWORD': pg_password
        },
        command = 'source_swissdata' 
    )

    postprocess_swissdata = DockerOperator(

    ...

    )

run_swissdata.set_downstream(source_swissdata)
source_swissdata.set_downstream(postprocess_swissdata)



```


]


---

## Task Specific Image


.py-large[
```python

run_swissdata = DockerOperator(
        task_id = 'run_swissdata',
        image = 'some-docker-registry.ch/swissdata:0.1.0',
        api_version = 'auto',
        auto_remove = True,
        force_pull = True,
        volumes = [
            'swissdata-output:/output'
        ],
        docker_url = "unix:///var/run/docker.sock"
    )

```

]

---

## Standard Image and a Task File


.py-large[
```python

source_swissdata = DockerOperator(
        task_id = 'source_swissdata',
        image = 'some-docker-registry.ch/kofbase:0.1.0',
        user='some-base-user',
        api_version = 'auto',
        auto_remove = True,
        force_pull = True,
        volumes = [
            'swissdata-output:/swissdata',
            'kofbase-tasks:/tasks'
        ],
        docker_url = 'unix:///var/run/docker.sock',
        environment = {
            'PG_PASSWORD': pg_password
        },
        command = 'source_swissdata' 
    )
```

]

---

## The Role of R 

.pull-left[

### What Does R Do in This?

- miniCRAN + R packages take care of dependencies
- Downloading, reading and processing data using packages such as
_{readxl}_, _{httr}_, _{rvest}_, _{xml2}_, _{jsonlite}_,
_{pxR}_, _{tsbox}_, _{yaml}_, ... 
- R is used as database interface layer _{timeseriesdb}_


]


---

## The Role of R 

.pull-left[

### What Does R Do in This?

- miniCRAN + R packages take care of dependencies
- Downloading, reading and processing data using packages such as
_{readxl}_, _{httr}_, _{rvest}_, _{xml2}_, _{jsonlite}_,
_{pxR}_, _{tsbox}_, _{yaml}_, ... 
- R is used as database interface layer _{timeseriesdb}_


]

.pull-right[

### Is R any Good at This?


]

---

## The Role of R 

.pull-left[

### What Does R Do in This?

- miniCRAN + R packages take care of dependencies
- Downloading, reading and processing data using packages such as
_{readxl}_, _{httr}_, _{rvest}_, _{xml2}_, _{jsonlite}_,
_{pxR}_, _{tsbox}_, _{yaml}_, ... 
- R is used as database interface layer _{timeseriesdb}_


]

.pull-right[

### Is R any Good at This?

- dependencies are managed reasonably well, 
weaknesses are mitigated by docker



]

---

## The Role of R 

.pull-left[

### What Does R Do in This?

- miniCRAN + R packages take care of dependencies
- Downloading, reading and processing data using packages such as
_{readxl}_, _{httr}_, _{rvest}_, _{xml2}_, _{jsonlite}_,
_{pxR}_, _{tsbox}_, _{yaml}_, ... 
- R is used as database interface layer _{timeseriesdb}_


]

.pull-right[

### Is R any Good at This?

- dependencies are managed reasonably well, 
weaknesses are mitigated by docker

- R interfaces incredibly well, there is an 
R package for everything (15K+ and counting). 


]

---

## The Role of R 

.pull-left[

### What Does R Do in This?

- miniCRAN + R packages take care of dependencies
- Downloading, reading and processing data using packages such as
_{readxl}_, _{httr}_, _{rvest}_, _{xml2}_, _{jsonlite}_,
_{pxR}_, _{tsbox}_, _{yaml}_, ... 
- R is used as database interface layer _{timeseriesdb}_


]

.pull-right[

### Is R any Good at This?

- dependencies are managed reasonably well, 
weaknesses are mitigated by docker

- R interfaces incredibly well, there is an 
R package for everything (15K+ and counting). 

- R is inclusive: it's interpreted. It runs on any major OS. Amazing resources 
to reach carpentry level. It's free. 

]

---

class: thanks

## Resources

- [Slides (Github)](https://github.com/mbannert/slidedeck/tree/master/erum2020)
- [https://erum2020-slides.netlify.app/ (rendered slides)](https://erum2020-slides.netlify.app/)
- [Rocker Project](https://www.rocker-project.org/)
- [Apache Airflow](https://airflow.apache.org/) 
- [Apache Airflow Summit](https://airflowsummit.org/)
- [uRos: R in Official Statistics](https://r-project.ro/conference2020.html)
- [miniCRAN](https://cran.r-project.org/web/packages/miniCRAN/index.html)
- [gitlab CI](https://docs.gitlab.com/ee/ci/)
- [@whatsgoodio (chirp, chirp)](https://twitter.com/whatsgoodio)
















